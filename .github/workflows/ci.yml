name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Run unit tests
      run: make test-unit
      
    - name: Run unit tests with coverage
      run: make test-coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        # Build for multiple platforms
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Exclude combinations that don't make sense
          - goos: windows
            goarch: arm64
            
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
          
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        if [ "$GOOS" = "windows" ]; then
          go build -ldflags="-s -w" -o dist/terraform-provider-pihole_${{ matrix.goos }}_${{ matrix.goarch }}.exe
        else
          go build -ldflags="-s -w" -o dist/terraform-provider-pihole_${{ matrix.goos }}_${{ matrix.goarch }}
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: terraform-provider-pihole-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  acceptance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-acceptance-tests'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Start Pi-hole container
      run: |
        docker run -d \
          --name pihole-test \
          -p 8080:80 \
          -p 8053:53/tcp \
          -p 8053:53/udp \
          -e WEBPASSWORD=testpass123 \
          -e VIRTUAL_HOST=localhost \
          -e ServerIP=127.0.0.1 \
          -e DNS1=8.8.8.8 \
          -e DNS2=8.8.4.4 \
          pihole/pihole:2025.07.1
          
        # Wait for Pi-hole web interface to be ready
        echo "Waiting for Pi-hole web interface..."
        timeout 120 bash -c 'until curl -f http://localhost:8080/admin/; do echo "Waiting..."; sleep 5; done'
        
        # Additional wait for Pi-hole API to be fully ready
        echo "Pi-hole web interface ready, waiting for API to initialize..."
        sleep 60
        
        # Check if all Pi-hole services are running
        echo "Checking Pi-hole service status..."
        docker exec pihole-test supervisorctl status || echo "Supervisor status check failed"
        
        # Test API accessibility
        echo "Testing Pi-hole API accessibility..."
        curl -v http://localhost:8080/admin/api.php || echo "API endpoint test failed, continuing anyway..."
        
        # Show Pi-hole logs for debugging
        echo "Pi-hole container logs:"
        docker logs pihole-test --tail 20
        
    - name: Debug Pi-hole authentication
      run: |
        echo "Testing Pi-hole authentication manually..."
        
        # Test basic connectivity
        echo "1. Testing basic connectivity..."
        curl -i http://localhost:8080/admin/ || echo "Web interface not accessible"
        
        # Check available API endpoints
        echo "2. Exploring available endpoints..."
        echo "Testing /admin/api.php:"
        curl -i "http://localhost:8080/admin/api.php?summary" || echo "/admin/api.php not accessible"
        
        echo "Testing /api/auth:"
        curl -i http://localhost:8080/api/auth -X POST -H "Content-Type: application/json" \
          -d '{"password":"testpass123"}' || echo "/api/auth not accessible"
          
        echo "Testing /admin/scripts/pi-hole/php/auth.php:"
        curl -i http://localhost:8080/admin/scripts/pi-hole/php/auth.php -X POST \
          -H "Content-Type: application/json" -d '{"password":"testpass123"}' || echo "auth.php not accessible"
          
        echo "Testing /admin/api/auth.php:"
        curl -i http://localhost:8080/admin/api/auth.php -X POST \
          -H "Content-Type: application/json" -d '{"password":"testpass123"}' || echo "api/auth.php not accessible"
        
        # Check what's actually available
        echo "3. Directory listing attempts..."
        curl -i http://localhost:8080/api/ || echo "/api/ not accessible"
        curl -i http://localhost:8080/admin/api/ || echo "/admin/api/ not accessible"
        
        # Test traditional Pi-hole API with token
        echo "4. Testing traditional Pi-hole API..."
        curl -i "http://localhost:8080/admin/api.php?auth=testpass123&summary" || echo "Traditional API failed"
        
        # Check if there are any DNS management endpoints
        echo "4b. Checking DNS management capabilities..."
        curl -i "http://localhost:8080/admin/api.php?auth=testpass123&customdns" || echo "Custom DNS API not available"
        curl -i "http://localhost:8080/admin/api.php?auth=testpass123&customcname" || echo "Custom CNAME API not available"
        
        # Check Pi-hole CLI capabilities
        echo "4c. Checking Pi-hole CLI capabilities..."
        docker exec pihole-test pihole -h | grep -i dns || echo "DNS commands not found"
        docker exec pihole-test pihole -a help || echo "Admin commands help failed"
        
        # Test adding a custom DNS record via CLI
        echo "4d. Testing CLI DNS record management..."
        docker exec pihole-test pihole -a addcustomdns test.example.com 192.168.1.100 || echo "CLI DNS add failed"
        docker exec pihole-test pihole -a removecustomdns test.example.com || echo "CLI DNS remove failed"
        
        # Check if custom.list file exists and is writable
        echo "4e. Checking custom.list file..."
        docker exec pihole-test ls -la /etc/pihole/custom.list || echo "custom.list not found"
        docker exec pihole-test cat /etc/pihole/custom.list || echo "Cannot read custom.list"
        
        # Check if password is set correctly in container
        echo "5. Checking container environment..."
        docker exec pihole-test env | grep -i password || echo "No password env vars found"
        
        # Check Pi-hole setup status and version
        echo "6. Checking Pi-hole status and version..."
        docker exec pihole-test pihole status || echo "Pi-hole status check failed"
        docker exec pihole-test pihole version || echo "Pi-hole version check failed"
        
        # Show more detailed logs
        echo "7. Recent container logs:"
        docker logs pihole-test --tail 50
        
    - name: Run acceptance tests
      env:
        TF_ACC: 1
        PIHOLE_URL: http://localhost:8080
        PIHOLE_PASSWORD: testpass123
      run: make test-acc
      
    - name: Stop Pi-hole container
      if: always()
      run: docker stop pihole-test && docker rm pihole-test

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Install goimports
      run: go install golang.org/x/tools/cmd/goimports@latest
        
    - name: Run formatting checks
      run: |
        # Check if code is properly formatted
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          echo "Run 'make fmt' to fix formatting issues"
          exit 1
        fi
        
        # Check imports formatting
        GOIMPORTS_OUTPUT=$(goimports -l .)
        if [ -n "$GOIMPORTS_OUTPUT" ]; then
          echo "Imports are not formatted properly:"
          echo "$GOIMPORTS_OUTPUT"
          echo "Run 'make fmt' to fix import formatting"
          exit 1
        fi
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.64.8
        args: --config .golangci.yml --timeout=5m